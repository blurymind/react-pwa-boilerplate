{"version":3,"sources":["logo.svg","packages/dragable/Card.tsx","packages/dragable/DndArea.tsx","packages/dragable/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ItemTypes","defaultStyle","border","padding","marginBottom","backgroundColor","color","cursor","Card","id","tooltip","children","style","index","moveCard","ref","useRef","useDrop","accept","collect","monitor","handlerId","getHandlerId","hover","item","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","type","isDragging","opacity","drag","data-handler-id","title","display","flex","width","height","Container","cards","setCards","isHorizontal","useCallback","dragCard","update","$splice","flexDirection","map","card","i","renderCard","DndArea","DndProvider","backend","HTML5Backend","mockCards","onClick","alert","App","useState","useEffect","deferredPrompt","addBtn","document","getElementById","window","addEventListener","e","preventDefault","prompt","userChoice","then","choiceResult","outcome","console","log","className","src","logo","alt","href","target","rel","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3e84396e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import { FC, useRef } from \"react\";\nimport { useDrag, useDrop, DropTargetMonitor } from \"react-dnd\";\nimport { XYCoord } from \"dnd-core\";\n\nimport { CardType } from \"./types\";\n\nexport const ItemTypes = {\n  CARD: \"card\",\n};\n\nconst defaultStyle = {\n  border: \"1px dashed gray\",\n  padding: \"0.5rem 1rem\",\n  marginBottom: \".5rem\",\n  backgroundColor: \"white\",\n  color: \"black\",\n  cursor: \"move\",\n};\n\nexport interface CardProps extends CardType {\n  index: number;\n  moveCard: (dragIndex: number, hoverIndex: number) => void;\n}\n\ninterface DragItem {\n  index: number;\n  id: string;\n  type: string;\n}\n\nexport const Card: FC<CardProps> = ({\n  id,\n  tooltip,\n  children,\n  style = defaultStyle,\n  index,\n  moveCard,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [{ handlerId }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    collect(monitor: any) {\n      return {\n        handlerId: monitor.getHandlerId(),\n      };\n    },\n    hover(item: DragItem, monitor: DropTargetMonitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      moveCard(dragIndex, hoverIndex);\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    type: ItemTypes.CARD,\n    item: () => {\n      return { id, index };\n    },\n    collect: (monitor: any) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const opacity = isDragging ? 0 : 1;\n  drag(drop(ref));\n  return (\n    <div\n      ref={ref}\n      style={{ ...style, opacity }}\n      data-handler-id={handlerId}\n      title={tooltip}\n    >\n      {children}\n    </div>\n  );\n};\n","import { FC, useCallback } from \"react\";\nimport { Card } from \"./Card\";\nimport update from \"immutability-helper\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nimport { CardType } from \"./types\";\n\nconst defaultStyle = {\n  display: \"flex\",\n  flex: 1,\n  width: \"100%\",\n  height: \"100%\",\n};\n\nexport interface Props {\n  isHorizontal?: boolean;\n  cards?: Array<CardType>;\n  setCards: (p: any) => void;\n  style?: any;\n}\n\nexport const Container: FC<Props> = ({\n  cards = [],\n  setCards,\n  style = defaultStyle,\n  isHorizontal,\n}: Props) => {\n  {\n    const moveCard = useCallback(\n      (dragIndex: number, hoverIndex: number) => {\n        const dragCard = cards[dragIndex];\n        setCards(\n          update(cards, {\n            $splice: [\n              [dragIndex, 1],\n              [hoverIndex, 0, dragCard],\n            ],\n          })\n        );\n      },\n      [cards]\n    );\n\n    const renderCard = (card: CardType, index: number) => {\n      return (\n        <Card\n          key={card.id}\n          index={index}\n          id={card.id}\n          tooltip={card.tooltip}\n          moveCard={moveCard}\n          style={card.style}\n        >\n          {card.children}\n        </Card>\n      );\n    };\n\n    return (\n      <>\n        <div\n          style={{ ...style, flexDirection: isHorizontal ? \"row\" : \"column\" }}\n        >\n          {cards.map((card, i) => renderCard(card, i))}\n        </div>\n      </>\n    );\n  }\n};\n\nexport const DndArea = ({\n  cards = [],\n  setCards,\n  style,\n  isHorizontal,\n}: Props) => {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Container\n        cards={cards}\n        setCards={setCards}\n        style={style}\n        isHorizontal={isHorizontal}\n      />\n    </DndProvider>\n  );\n};\nexport default DndArea;\n","import DndArea from \"./DndArea\";\n\nexport default DndArea;\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport DndArea from \"./packages/dragable\";\n\nconst mockCards = [\n  {\n    id: 1,\n    children: \"Write a cool JS library\",\n  },\n  {\n    id: 2,\n    tooltip: \"Make it generic enough\",\n    children: <button onClick={() => alert(\"yay\")}>Test</button>,\n  },\n  {\n    id: 3,\n    children: \"Write README\",\n  },\n  {\n    id: 4,\n    children: \"Create some examples\",\n  },\n  {\n    id: 5,\n    tooltip:\n      \"Spam in Twitter and IRC to promote it (note that this element is taller than the others)\",\n  },\n  {\n    id: 6,\n    children: \"???\",\n  },\n  {\n    id: 7,\n    children: \"PROFIT\",\n  },\n];\n\nconst App = () => {\n  const [cards, setCards] = useState(mockCards);\n\n  useEffect(() => {\n    // PWA install promotion banner on start\n    let deferredPrompt: any = null;\n    const addBtn: any = document.getElementById(\"addBtn\");\n    window.addEventListener(\"beforeinstallprompt\", (e: any) => {\n      // Prevent Chrome 67 and earlier from automatically showing the prompt\n      e.preventDefault();\n      deferredPrompt = e;\n      // Update UI to notify the user they can add to home screen\n      addBtn.style.display = \"block\";\n\n      addBtn.addEventListener(\"click\", () => {\n        // hide our user interface that shows our A2HS button\n        addBtn.style.display = \"none\";\n        deferredPrompt.prompt();\n        // Wait for the user to respond to the prompt\n        deferredPrompt.userChoice.then((choiceResult: any) => {\n          if (choiceResult.outcome === \"accepted\") {\n            console.log(\"User accepted the A2HS prompt\");\n            addBtn.style.display = \"none\";\n          } else {\n            console.log(\"User dismissed the A2HS prompt\");\n          }\n          deferredPrompt = null;\n        });\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"text-red-500\">\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <br />\n        <button id=\"addBtn\">Add pwa</button>\n        <DndArea cards={cards} setCards={setCards} />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  //if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}